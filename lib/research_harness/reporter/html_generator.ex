defmodule CrucibleHarness.Reporter.HTMLGenerator do
  @moduledoc """
  Generates interactive HTML reports.
  """

  @doc """
  Generates an HTML report with basic styling.
  """
  def generate(config, analysis) do
    """
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>#{config.name} - Research Report</title>
      <style>
        #{css_styles()}
      </style>
    </head>
    <body>
      <div class="container">
        <header>
          <h1>#{config.name}</h1>
          <p class="meta">
            <strong>Experiment ID:</strong> #{config.experiment_id} |
            <strong>Date:</strong> #{Date.utc_today()} |
            <strong>Author:</strong> #{config.author}
          </p>
        </header>

        <section id="abstract">
          <h2>Abstract</h2>
          <p>#{config.description}</p>
        </section>

        <section id="methodology">
          <h2>Methodology</h2>
          <h3>Dataset</h3>
          <ul>
            <li><strong>Name:</strong> #{config.dataset}</li>
            <li><strong>Repetitions:</strong> #{config.repeat}</li>
          </ul>

          <h3>Conditions</h3>
          <ul>
            #{format_conditions_html(config.conditions)}
          </ul>

          <h3>Metrics</h3>
          <ul>
            #{format_metrics_html(config.metrics)}
          </ul>
        </section>

        <section id="results">
          <h2>Results</h2>
          <h3>Summary Statistics</h3>
          #{format_results_table_html(analysis.aggregated_results)}
        </section>

        <section id="statistics">
          <h2>Statistical Analysis</h2>
          <h3>Pairwise Comparisons</h3>
          #{format_comparisons_html(analysis.statistical_analysis.comparisons)}
        </section>

        <footer>
          <p><em>Report generated by ResearchHarness</em></p>
        </footer>
      </div>
    </body>
    </html>
    """
  end

  defp css_styles do
    """
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
      line-height: 1.6;
      color: #333;
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
      background-color: #f5f5f5;
    }

    .container {
      background: white;
      padding: 40px;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    header {
      border-bottom: 3px solid #007bff;
      padding-bottom: 20px;
      margin-bottom: 30px;
    }

    h1 {
      color: #007bff;
      margin-bottom: 10px;
    }

    h2 {
      color: #0056b3;
      margin-top: 30px;
      margin-bottom: 15px;
      border-bottom: 2px solid #e0e0e0;
      padding-bottom: 10px;
    }

    h3 {
      color: #333;
      margin-top: 20px;
      margin-bottom: 10px;
    }

    .meta {
      color: #666;
      font-size: 0.95em;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      margin: 20px 0;
      background: white;
    }

    th, td {
      padding: 12px;
      text-align: left;
      border-bottom: 1px solid #ddd;
    }

    th {
      background-color: #007bff;
      color: white;
      font-weight: 600;
    }

    tr:hover {
      background-color: #f5f5f5;
    }

    .significant {
      color: #28a745;
      font-weight: bold;
    }

    .not-significant {
      color: #6c757d;
    }

    ul {
      list-style-type: none;
      padding-left: 0;
    }

    li {
      padding: 5px 0;
    }

    footer {
      margin-top: 40px;
      padding-top: 20px;
      border-top: 1px solid #e0e0e0;
      text-align: center;
      color: #666;
    }
    """
  end

  defp format_conditions_html(conditions) do
    Enum.map(conditions, fn condition ->
      "<li><strong>#{condition.name}</strong>: #{Map.get(condition, :description, "No description")}</li>"
    end)
    |> Enum.join("\n")
  end

  defp format_metrics_html(metrics) do
    Enum.map(metrics, fn metric ->
      "<li>#{metric}</li>"
    end)
    |> Enum.join("\n")
  end

  defp format_results_table_html(results) do
    if Enum.empty?(results) do
      "<p>No results available.</p>"
    else
      first_result = List.first(results)
      metrics = Map.keys(first_result.metrics)

      """
      <table>
        <thead>
          <tr>
            <th>Condition</th>
            <th>N</th>
            #{Enum.map_join(metrics, "", fn m -> "<th>#{m}</th>" end)}
          </tr>
        </thead>
        <tbody>
          #{format_results_rows_html(results, metrics)}
        </tbody>
      </table>
      """
    end
  end

  defp format_results_rows_html(results, metrics) do
    Enum.map(results, fn result ->
      metric_cells =
        Enum.map(metrics, fn metric ->
          stats = result.metrics[metric]

          if stats && stats.mean do
            "<td>#{Float.round(stats.mean, 3)} ± #{Float.round(stats.std || 0, 3)}</td>"
          else
            "<td>N/A</td>"
          end
        end)
        |> Enum.join("")

      "<tr><td><strong>#{result.condition}</strong></td><td>#{result.n}</td>#{metric_cells}</tr>"
    end)
    |> Enum.join("\n")
  end

  defp format_comparisons_html(comparisons) do
    if Enum.empty?(comparisons) do
      "<p>No comparisons available (need at least 2 conditions).</p>"
    else
      Enum.map(comparisons, fn comp ->
        {c1, c2} = comp.pair

        """
        <h4>#{c1} vs #{c2}</h4>
        #{format_comparison_table_html(comp.metrics)}
        """
      end)
      |> Enum.join("\n")
    end
  end

  defp format_comparison_table_html(metrics) do
    """
    <table>
      <thead>
        <tr>
          <th>Metric</th>
          <th>Mean Diff</th>
          <th>t-statistic</th>
          <th>p-value</th>
          <th>Significant?</th>
          <th>Effect Size</th>
        </tr>
      </thead>
      <tbody>
        #{format_comparison_rows_html(metrics)}
      </tbody>
    </table>
    """
  end

  defp format_comparison_rows_html(metrics) do
    Enum.map(metrics, fn {metric, stats} ->
      sig_class = if stats.significant, do: "significant", else: "not-significant"
      sig_text = if stats.significant, do: "Yes", else: "No"

      """
      <tr>
        <td><strong>#{metric}</strong></td>
        <td>#{format_number(stats.mean_diff)}</td>
        <td>#{format_number(stats.t_statistic)}</td>
        <td>#{format_number(stats.p_value)}</td>
        <td class="#{sig_class}">#{sig_text}</td>
        <td>#{format_number(stats.effect_size)}</td>
      </tr>
      """
    end)
    |> Enum.join("\n")
  end

  defp format_number(:infinity), do: "∞"
  defp format_number(n) when is_float(n), do: Float.round(n, 4)
  defp format_number(n) when is_integer(n), do: n
  defp format_number(n), do: to_string(n)
end
