defmodule CrucibleHarness.Reporter.LaTeXGenerator do
  @moduledoc """
  Generates publication-ready LaTeX tables and figures.
  """

  @doc """
  Generates LaTeX output suitable for academic papers.
  """
  def generate(_config, analysis) do
    [
      document_preamble(),
      results_table(analysis),
      comparison_table(analysis),
      statistical_tests_table(analysis),
      document_end()
    ]
    |> Enum.join("\n\n")
  end

  defp document_preamble do
    """
    % LaTeX Report Generated by ResearchHarness
    % Experiment: #{DateTime.utc_now() |> DateTime.to_date()}

    \\documentclass{article}
    \\usepackage{booktabs}
    \\usepackage{multirow}
    \\usepackage{amsmath}

    \\begin{document}
    """
  end

  defp results_table(analysis) do
    results = analysis.aggregated_results

    if Enum.empty?(results) do
      ""
    else
      first_result = List.first(results)
      # Limit to 3 metrics for space
      metrics = Map.keys(first_result.metrics) |> Enum.take(3)

      """
      \\begin{table}[htbp]
      \\centering
      \\caption{Summary of Experimental Results}
      \\label{tab:results}
      \\begin{tabular}{l#{String.duplicate("c", length(metrics))}}
      \\toprule
      \\textbf{Condition} #{Enum.map_join(metrics, "", fn m -> "& \\textbf{#{escape_latex(to_string(m))}}" end)} \\\\
      \\midrule
      #{format_latex_results(results, metrics)}
      \\bottomrule
      \\end{tabular}
      \\end{table}
      """
    end
  end

  defp format_latex_results(results, metrics) do
    Enum.map(results, fn result ->
      metric_values =
        Enum.map(metrics, fn metric ->
          stats = result.metrics[metric]

          if stats && stats.mean do
            "& $#{Float.round(stats.mean, 3)} \\pm #{Float.round(stats.std || 0, 3)}$"
          else
            "& N/A"
          end
        end)
        |> Enum.join(" ")

      "#{escape_latex(result.condition)} #{metric_values} \\\\"
    end)
    |> Enum.join("\n")
  end

  defp comparison_table(analysis) do
    comparisons = analysis.statistical_analysis.comparisons

    if Enum.empty?(comparisons) do
      ""
    else
      comp = List.first(comparisons)
      metrics = Map.keys(comp.metrics) |> Enum.take(3)

      """
      \\begin{table}[htbp]
      \\centering
      \\caption{Pairwise Statistical Comparisons}
      \\label{tab:comparisons}
      \\begin{tabular}{ll#{String.duplicate("c", length(metrics))}}
      \\toprule
      \\textbf{Condition 1} & \\textbf{Condition 2} #{Enum.map_join(metrics, "", fn m -> "& \\textbf{#{escape_latex(to_string(m))}}" end)} \\\\
      \\midrule
      #{format_latex_comparisons(comparisons, metrics)}
      \\bottomrule
      \\end{tabular}
      \\end{table}
      """
    end
  end

  defp format_latex_comparisons(comparisons, metrics) do
    Enum.map(comparisons, fn comp ->
      {c1, c2} = comp.pair

      metric_values =
        Enum.map(metrics, fn metric ->
          stats = comp.metrics[metric]
          sig = if stats.significant, do: "^{*}", else: ""
          "& $#{Float.round(stats.mean_diff, 3)}#{sig}$"
        end)
        |> Enum.join(" ")

      "#{escape_latex(c1)} & #{escape_latex(c2)} #{metric_values} \\\\"
    end)
    |> Enum.join("\n")
  end

  defp statistical_tests_table(analysis) do
    comparisons = analysis.statistical_analysis.comparisons

    if Enum.empty?(comparisons) do
      ""
    else
      comp = List.first(comparisons)
      metric = List.first(Map.keys(comp.metrics))

      """
      \\begin{table}[htbp]
      \\centering
      \\caption{Statistical Test Results}
      \\label{tab:stats}
      \\begin{tabular}{lcccc}
      \\toprule
      \\textbf{Comparison} & \\textbf{t-statistic} & \\textbf{p-value} & \\textbf{Significant} & \\textbf{Effect Size} \\\\
      \\midrule
      #{format_latex_stats(comparisons, metric)}
      \\bottomrule
      \\end{tabular}
      \\end{table}
      """
    end
  end

  defp format_latex_stats(comparisons, metric) do
    Enum.map(comparisons, fn comp ->
      {c1, c2} = comp.pair
      stats = comp.metrics[metric]
      sig = if stats.significant, do: "Yes", else: "No"

      "#{escape_latex(c1)} vs #{escape_latex(c2)} & " <>
        "$#{format_number_latex(stats.t_statistic, 3)}$ & " <>
        "$#{format_number_latex(stats.p_value, 4)}$ & " <>
        "#{sig} & " <>
        "$#{format_number_latex(stats.effect_size, 3)}$ \\\\"
    end)
    |> Enum.join("\n")
  end

  defp document_end do
    """
    \\end{document}
    """
  end

  defp format_number_latex(:infinity, _precision), do: "\\infty"
  defp format_number_latex(n, precision) when is_float(n), do: Float.round(n, precision)
  defp format_number_latex(n, _precision) when is_integer(n), do: n
  defp format_number_latex(n, _precision), do: to_string(n)

  defp escape_latex(text) do
    text
    |> String.replace("_", "\\_")
    |> String.replace("%", "\\%")
    |> String.replace("&", "\\&")
    |> String.replace("#", "\\#")
    |> String.replace("$", "\\$")
  end
end
